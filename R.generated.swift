// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `call`.
    static let call = ImageResource(bundle: _R.hostingBundle, name: "call")
    /// Image `call_in`.
    static let call_in = ImageResource(bundle: _R.hostingBundle, name: "call_in")
    /// Image `call_out`.
    static let call_out = ImageResource(bundle: _R.hostingBundle, name: "call_out")
    /// Image `delete`.
    static let delete = ImageResource(bundle: _R.hostingBundle, name: "delete")
    /// Image `delete_all`.
    static let delete_all = ImageResource(bundle: _R.hostingBundle, name: "delete_all")
    /// Image `dial`.
    static let dial = ImageResource(bundle: _R.hostingBundle, name: "dial")
    /// Image `dial_down`.
    static let dial_down = ImageResource(bundle: _R.hostingBundle, name: "dial_down")
    /// Image `dial_tab`.
    static let dial_tab = ImageResource(bundle: _R.hostingBundle, name: "dial_tab")
    /// Image `dial_up`.
    static let dial_up = ImageResource(bundle: _R.hostingBundle, name: "dial_up")
    /// Image `head_photo_default`.
    static let head_photo_default = ImageResource(bundle: _R.hostingBundle, name: "head_photo_default")
    /// Image `message`.
    static let message = ImageResource(bundle: _R.hostingBundle, name: "message")
    /// Image `paste`.
    static let paste = ImageResource(bundle: _R.hostingBundle, name: "paste")
    /// Image `shop`.
    static let shop = ImageResource(bundle: _R.hostingBundle, name: "shop")
    /// Image `video_call`.
    static let video_call = ImageResource(bundle: _R.hostingBundle, name: "video_call")
    /// Image `voice_call`.
    static let voice_call = ImageResource(bundle: _R.hostingBundle, name: "voice_call")
    
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.call, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "call_in", bundle: ..., traitCollection: ...)`
    static func call_in(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.call_in, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "call_out", bundle: ..., traitCollection: ...)`
    static func call_out(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.call_out, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.delete, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "delete_all", bundle: ..., traitCollection: ...)`
    static func delete_all(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.delete_all, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dial", bundle: ..., traitCollection: ...)`
    static func dial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dial_down", bundle: ..., traitCollection: ...)`
    static func dial_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dial_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dial_tab", bundle: ..., traitCollection: ...)`
    static func dial_tab(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dial_tab, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dial_up", bundle: ..., traitCollection: ...)`
    static func dial_up(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dial_up, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "head_photo_default", bundle: ..., traitCollection: ...)`
    static func head_photo_default(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.head_photo_default, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.message, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "paste", bundle: ..., traitCollection: ...)`
    static func paste(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.paste, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shop, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "video_call", bundle: ..., traitCollection: ...)`
    static func video_call(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.video_call, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "voice_call", bundle: ..., traitCollection: ...)`
    static func voice_call(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.voice_call, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CallConView`.
    static let callConView = _R.nib._CallConView()
    /// Nib `DialView`.
    static let dialView = _R.nib._DialView()
    
    /// `UINib(name: "CallConView", bundle: ...)`
    static func callConView(_: Void) -> UINib {
      return UINib(resource: R.nib.callConView)
    }
    
    /// `UINib(name: "DialView", bundle: ...)`
    static func dialView(_: Void) -> UINib {
      return UINib(resource: R.nib.dialView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `dial_1`.
    static let dial_1: ReuseIdentifier<DialNumberCell> = ReuseIdentifier(identifier: "dial_1")
    /// Reuse identifier `dial_2`.
    static let dial_2: ReuseIdentifier<DialIconCell> = ReuseIdentifier(identifier: "dial_2")
    /// Reuse identifier `dial_3`.
    static let dial_3: ReuseIdentifier<DialNumberCell> = ReuseIdentifier(identifier: "dial_3")
    /// Reuse identifier `dial_a`.
    static let dial_a: ReuseIdentifier<DialNumberCell> = ReuseIdentifier(identifier: "dial_a")
    /// Reuse identifier `dial_b`.
    static let dial_b: ReuseIdentifier<DialIconCell> = ReuseIdentifier(identifier: "dial_b")
    /// Reuse identifier `log_a`.
    static let log_a: ReuseIdentifier<CallLogACell> = ReuseIdentifier(identifier: "log_a")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.kratos.18phone") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CallConView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CallConView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CallConView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CallConView
      }
      
      private init() {}
    }
    
    struct _DialView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "DialView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DialView1Controller
      
      let b = StoryboardViewControllerResource<UIViewController>(identifier: "B")
      let bundle = _R.hostingBundle
      let name = "Main"
      
      func b(_: Void) -> UIViewController? {
        return UIStoryboard(resource: self).instantiateViewController(b)
      }
      
      static func validate() throws {
        if UIImage(named: "message") == nil { throw ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "shop") == nil { throw ValidationError(description: "[R.swift] Image named 'shop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "dial_tab") == nil { throw ValidationError(description: "[R.swift] Image named 'dial_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "dial_down") == nil { throw ValidationError(description: "[R.swift] Image named 'dial_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "delete_all") == nil { throw ValidationError(description: "[R.swift] Image named 'delete_all' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "dial") == nil { throw ValidationError(description: "[R.swift] Image named 'dial' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().b() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'b' could not be loaded from storyboard 'Main' as 'UIViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}