//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.beyebe.18phone") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Address.plist`.
    static let addressPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Address", pathExtension: "plist")
    /// Resource file `ringtone.wav`.
    static let ringtoneWav = Rswift.FileResource(bundle: R.hostingBundle, name: "ringtone", pathExtension: "wav")
    /// Resource file `test`.
    static let test = Rswift.FileResource(bundle: R.hostingBundle, name: "test", pathExtension: "")
    
    /// `bundle.url(forResource: "Address", withExtension: "plist")`
    static func addressPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addressPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ringtone", withExtension: "wav")`
    static func ringtoneWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ringtoneWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "test", withExtension: "")`
    static func test(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.test
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `Launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch")
    /// Image `about`.
    static let about = Rswift.ImageResource(bundle: R.hostingBundle, name: "about")
    /// Image `add_contact`.
    static let add_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_contact")
    /// Image `answer`.
    static let answer = Rswift.ImageResource(bundle: R.hostingBundle, name: "answer")
    /// Image `backup`.
    static let backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup")
    /// Image `bill`.
    static let bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "bill")
    /// Image `call_in_connected`.
    static let call_in_connected = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_in_connected")
    /// Image `call_in_unconnected`.
    static let call_in_unconnected = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_in_unconnected")
    /// Image `call_out_connected`.
    static let call_out_connected = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_out_connected")
    /// Image `call_out_unconnected`.
    static let call_out_unconnected = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_out_unconnected")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `delete_all`.
    static let delete_all = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_all")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `dial_down`.
    static let dial_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial_down")
    /// Image `dial_plate`.
    static let dial_plate = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial_plate")
    /// Image `dial_tab_selected`.
    static let dial_tab_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial_tab_selected")
    /// Image `dial_tab`.
    static let dial_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial_tab")
    /// Image `dial_up`.
    static let dial_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial_up")
    /// Image `dial`.
    static let dial = Rswift.ImageResource(bundle: R.hostingBundle, name: "dial")
    /// Image `female`.
    static let female = Rswift.ImageResource(bundle: R.hostingBundle, name: "female")
    /// Image `hang_up`.
    static let hang_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "hang_up")
    /// Image `head_photo_default`.
    static let head_photo_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_photo_default")
    /// Image `is_register`.
    static let is_register = Rswift.ImageResource(bundle: R.hostingBundle, name: "is_register")
    /// Image `male`.
    static let male = Rswift.ImageResource(bundle: R.hostingBundle, name: "male")
    /// Image `message_selected`.
    static let message_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_selected")
    /// Image `message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "message")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `paste`.
    static let paste = Rswift.ImageResource(bundle: R.hostingBundle, name: "paste")
    /// Image `qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `shop_selected`.
    static let shop_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop_selected")
    /// Image `shop`.
    static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `speaker`.
    static let speaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "speaker")
    /// Image `system_message`.
    static let system_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "system_message")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `video_call`.
    static let video_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_call")
    /// Image `video_icon`.
    static let video_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_icon")
    /// Image `voice_call`.
    static let voice_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_call")
    /// Image `voice_icon`.
    static let voice_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_icon")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `yellowlight`.
    static let yellowlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowlight")
    
    /// `UIImage(named: "Launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about", bundle: ..., traitCollection: ...)`
    static func about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_contact", bundle: ..., traitCollection: ...)`
    static func add_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "answer", bundle: ..., traitCollection: ...)`
    static func answer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup", bundle: ..., traitCollection: ...)`
    static func backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bill", bundle: ..., traitCollection: ...)`
    static func bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call_in_connected", bundle: ..., traitCollection: ...)`
    static func call_in_connected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_in_connected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call_in_unconnected", bundle: ..., traitCollection: ...)`
    static func call_in_unconnected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_in_unconnected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call_out_connected", bundle: ..., traitCollection: ...)`
    static func call_out_connected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_out_connected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "call_out_unconnected", bundle: ..., traitCollection: ...)`
    static func call_out_unconnected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_out_unconnected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete_all", bundle: ..., traitCollection: ...)`
    static func delete_all(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_all, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial", bundle: ..., traitCollection: ...)`
    static func dial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial_down", bundle: ..., traitCollection: ...)`
    static func dial_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial_plate", bundle: ..., traitCollection: ...)`
    static func dial_plate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial_plate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial_tab", bundle: ..., traitCollection: ...)`
    static func dial_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial_tab_selected", bundle: ..., traitCollection: ...)`
    static func dial_tab_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial_tab_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dial_up", bundle: ..., traitCollection: ...)`
    static func dial_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dial_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "female", bundle: ..., traitCollection: ...)`
    static func female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hang_up", bundle: ..., traitCollection: ...)`
    static func hang_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hang_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "head_photo_default", bundle: ..., traitCollection: ...)`
    static func head_photo_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_photo_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "is_register", bundle: ..., traitCollection: ...)`
    static func is_register(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.is_register, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "male", bundle: ..., traitCollection: ...)`
    static func male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_selected", bundle: ..., traitCollection: ...)`
    static func message_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "paste", bundle: ..., traitCollection: ...)`
    static func paste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paste, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shop_selected", bundle: ..., traitCollection: ...)`
    static func shop_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speaker", bundle: ..., traitCollection: ...)`
    static func speaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speaker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "system_message", bundle: ..., traitCollection: ...)`
    static func system_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.system_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "video_call", bundle: ..., traitCollection: ...)`
    static func video_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "video_icon", bundle: ..., traitCollection: ...)`
    static func video_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_call", bundle: ..., traitCollection: ...)`
    static func voice_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_icon", bundle: ..., traitCollection: ...)`
    static func voice_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yellowlight", bundle: ..., traitCollection: ...)`
    static func yellowlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowlight, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `NumberBar`.
    static let numberBar = _R.nib._NumberBar()
    
    /// `UINib(name: "NumberBar", in: bundle)`
    static func numberBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.numberBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ad_cell`.
    static let ad_cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ad_cell")
    /// Reuse identifier `backup_cell_a`.
    static let backup_cell_a: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "backup_cell_a")
    /// Reuse identifier `bill_call_log`.
    static let bill_call_log: Rswift.ReuseIdentifier<CallLogACell> = Rswift.ReuseIdentifier(identifier: "bill_call_log")
    /// Reuse identifier `contact`.
    static let contact: Rswift.ReuseIdentifier<ContactCell> = Rswift.ReuseIdentifier(identifier: "contact")
    /// Reuse identifier `detail_log_cell`.
    static let detail_log_cell: Rswift.ReuseIdentifier<DetailLogCell> = Rswift.ReuseIdentifier(identifier: "detail_log_cell")
    /// Reuse identifier `detail_phone_cell`.
    static let detail_phone_cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "detail_phone_cell")
    /// Reuse identifier `dial_1`.
    static let dial_1: Rswift.ReuseIdentifier<DialNumberCell> = Rswift.ReuseIdentifier(identifier: "dial_1")
    /// Reuse identifier `dial_2`.
    static let dial_2: Rswift.ReuseIdentifier<DialIconCell> = Rswift.ReuseIdentifier(identifier: "dial_2")
    /// Reuse identifier `dial_3`.
    static let dial_3: Rswift.ReuseIdentifier<DialNumberCell> = Rswift.ReuseIdentifier(identifier: "dial_3")
    /// Reuse identifier `edit_contact_cell`.
    static let edit_contact_cell: Rswift.ReuseIdentifier<EditContactCell> = Rswift.ReuseIdentifier(identifier: "edit_contact_cell")
    /// Reuse identifier `log_a`.
    static let log_a: Rswift.ReuseIdentifier<CallLogACell> = Rswift.ReuseIdentifier(identifier: "log_a")
    /// Reuse identifier `login_cell`.
    static let login_cell: Rswift.ReuseIdentifier<LoginCell> = Rswift.ReuseIdentifier(identifier: "login_cell")
    /// Reuse identifier `message_cell`.
    static let message_cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "message_cell")
    /// Reuse identifier `register_cell_a`.
    static let register_cell_a: Rswift.ReuseIdentifier<RegisterCell> = Rswift.ReuseIdentifier(identifier: "register_cell_a")
    /// Reuse identifier `register_cell_b`.
    static let register_cell_b: Rswift.ReuseIdentifier<RegisterCell> = Rswift.ReuseIdentifier(identifier: "register_cell_b")
    /// Reuse identifier `setting_cell`.
    static let setting_cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "setting_cell")
    /// Reuse identifier `user_detail_cell`.
    static let user_detail_cell: Rswift.ReuseIdentifier<UserDetailCell> = Rswift.ReuseIdentifier(identifier: "user_detail_cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `ContactDetailViewController`, and contains static references to 1 segues.
    struct contactDetailViewController {
      /// Segue identifier `editContactViewController`.
      static let editContactViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ContactDetailViewController, EditContactViewController> = Rswift.StoryboardSegueIdentifier(identifier: "editContactViewController")
      
      /// Optionally returns a typed version of segue `editContactViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editContactViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ContactDetailViewController, EditContactViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.contactDetailViewController.editContactViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ContactViewController`, and contains static references to 1 segues.
    struct contactViewController {
      /// Segue identifier `contactDetailViewController`.
      static let contactDetailViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ContactViewController, ContactDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "contactDetailViewController")
      
      /// Optionally returns a typed version of segue `contactDetailViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contactDetailViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ContactViewController, ContactDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.contactViewController.contactDetailViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RootViewController`, and contains static references to 2 segues.
    struct rootViewController {
      /// Segue identifier `callLogViewController`.
      static let callLogViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, CallLogViewController> = Rswift.StoryboardSegueIdentifier(identifier: "callLogViewController")
      /// Segue identifier `contactViewController`.
      static let contactViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, ContactViewController> = Rswift.StoryboardSegueIdentifier(identifier: "contactViewController")
      
      /// Optionally returns a typed version of segue `callLogViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func callLogViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, CallLogViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.callLogViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `contactViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contactViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, ContactViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.contactViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserCenterViewController`, and contains static references to 4 segues.
    struct userCenterViewController {
      /// Segue identifier `aboutViewController`.
      static let aboutViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserCenterViewController, AboutViewController> = Rswift.StoryboardSegueIdentifier(identifier: "aboutViewController")
      /// Segue identifier `billViewController`.
      static let billViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserCenterViewController, BillViewController> = Rswift.StoryboardSegueIdentifier(identifier: "billViewController")
      /// Segue identifier `editUserViewController`.
      static let editUserViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserCenterViewController, EditUserViewController> = Rswift.StoryboardSegueIdentifier(identifier: "editUserViewController")
      /// Segue identifier `mySettingViewController`.
      static let mySettingViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserCenterViewController, MySettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "mySettingViewController")
      
      /// Optionally returns a typed version of segue `aboutViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func aboutViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserCenterViewController, AboutViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userCenterViewController.aboutViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `billViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func billViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserCenterViewController, BillViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userCenterViewController.billViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `editUserViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editUserViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserCenterViewController, EditUserViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userCenterViewController.editUserViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `mySettingViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mySettingViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserCenterViewController, MySettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userCenterViewController.mySettingViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _NumberBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NumberBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NumberBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NumberBar
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CheckAccountViewController
      
      let backupViewController = StoryboardViewControllerResource<BackupViewController>(identifier: "BackupViewController")
      let bundle = R.hostingBundle
      let callLogMenuViewController = StoryboardViewControllerResource<CallLogMenuViewController>(identifier: "CallLogMenuViewController")
      let checkAccountViewController = StoryboardViewControllerResource<CheckAccountViewController>(identifier: "CheckAccountViewController")
      let communicateListViewController = StoryboardViewControllerResource<CommunicateListViewController>(identifier: "CommunicateListViewController")
      let communicateViewController = StoryboardViewControllerResource<CommunicateViewController>(identifier: "CommunicateViewController")
      let consumeViewController = StoryboardViewControllerResource<ConsumeViewController>(identifier: "ConsumeViewController")
      let detailMenuViewController = StoryboardViewControllerResource<DetailMenuViewController>(identifier: "DetailMenuViewController")
      let dialViewController = StoryboardViewControllerResource<DialViewController>(identifier: "DialViewController")
      let incomingCallViewController = StoryboardViewControllerResource<IncomingCallViewController>(identifier: "IncomingCallViewController")
      let incomingVideoViewController = StoryboardViewControllerResource<IncomingVideoViewController>(identifier: "IncomingVideoViewController")
      let kTabBarController = StoryboardViewControllerResource<KTabBarController>(identifier: "KTabBarController")
      let name = "Main"
      let outgoingCallViewController = StoryboardViewControllerResource<OutgoingCallViewController>(identifier: "OutgoingCallViewController")
      let outgoingVideoViewController = StoryboardViewControllerResource<OutgoingVideoViewController>(identifier: "OutgoingVideoViewController")
      
      func backupViewController(_: Void = ()) -> BackupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: backupViewController)
      }
      
      func callLogMenuViewController(_: Void = ()) -> CallLogMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: callLogMenuViewController)
      }
      
      func checkAccountViewController(_: Void = ()) -> CheckAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkAccountViewController)
      }
      
      func communicateListViewController(_: Void = ()) -> CommunicateListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: communicateListViewController)
      }
      
      func communicateViewController(_: Void = ()) -> CommunicateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: communicateViewController)
      }
      
      func consumeViewController(_: Void = ()) -> ConsumeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: consumeViewController)
      }
      
      func detailMenuViewController(_: Void = ()) -> DetailMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailMenuViewController)
      }
      
      func dialViewController(_: Void = ()) -> DialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dialViewController)
      }
      
      func incomingCallViewController(_: Void = ()) -> IncomingCallViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: incomingCallViewController)
      }
      
      func incomingVideoViewController(_: Void = ()) -> IncomingVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: incomingVideoViewController)
      }
      
      func kTabBarController(_: Void = ()) -> KTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kTabBarController)
      }
      
      func outgoingCallViewController(_: Void = ()) -> OutgoingCallViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outgoingCallViewController)
      }
      
      func outgoingVideoViewController(_: Void = ()) -> OutgoingVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outgoingVideoViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "delete_all") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_all' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "voice_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'voice_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "call_in_connected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'call_in_connected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Launch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_photo_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_photo_default' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shop_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dial_tab_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dial_tab_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dial_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dial_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speaker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speaker' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "voice_call") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'voice_call' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'more' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "answer") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'answer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dial_plate") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dial_plate' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hang_up") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hang_up' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().dialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dialViewController' could not be loaded from storyboard 'Main' as 'DialViewController'.") }
        if _R.storyboard.main().consumeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'consumeViewController' could not be loaded from storyboard 'Main' as 'ConsumeViewController'.") }
        if _R.storyboard.main().communicateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'communicateViewController' could not be loaded from storyboard 'Main' as 'CommunicateViewController'.") }
        if _R.storyboard.main().outgoingVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outgoingVideoViewController' could not be loaded from storyboard 'Main' as 'OutgoingVideoViewController'.") }
        if _R.storyboard.main().callLogMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'callLogMenuViewController' could not be loaded from storyboard 'Main' as 'CallLogMenuViewController'.") }
        if _R.storyboard.main().incomingVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'incomingVideoViewController' could not be loaded from storyboard 'Main' as 'IncomingVideoViewController'.") }
        if _R.storyboard.main().communicateListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'communicateListViewController' could not be loaded from storyboard 'Main' as 'CommunicateListViewController'.") }
        if _R.storyboard.main().incomingCallViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'incomingCallViewController' could not be loaded from storyboard 'Main' as 'IncomingCallViewController'.") }
        if _R.storyboard.main().detailMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailMenuViewController' could not be loaded from storyboard 'Main' as 'DetailMenuViewController'.") }
        if _R.storyboard.main().backupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'backupViewController' could not be loaded from storyboard 'Main' as 'BackupViewController'.") }
        if _R.storyboard.main().outgoingCallViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outgoingCallViewController' could not be loaded from storyboard 'Main' as 'OutgoingCallViewController'.") }
        if _R.storyboard.main().kTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kTabBarController' could not be loaded from storyboard 'Main' as 'KTabBarController'.") }
        if _R.storyboard.main().checkAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkAccountViewController' could not be loaded from storyboard 'Main' as 'CheckAccountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}